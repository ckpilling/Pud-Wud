{"moduleFile":{"sourceFilePath":"/home/chris/wallet/src/components/wallet/methods/createAccount.ts","jsFilePath":"/home/chris/wallet/src/components/wallet/methods/createAccount.js","cmps":[],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":["@services/error","@services/storage","@tinyanvil/sjcl","axios","stellar-sdk"],"hasVdomAttribute":false,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomPropOrAttr":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":["@tinyanvil/sjcl","axios","stellar-sdk","@services/error","@services/storage"],"potentialCmpRefs":[],"staticSourceFile":null,"staticSourceFileText":""},"jsText":"import sjcl from \"@tinyanvil/sjcl\";\r\nimport axios from \"axios\";\r\nimport { Keypair } from \"stellar-sdk\";\r\nimport { handleError } from \"@services/error\";\r\nimport { set } from \"@services/storage\";\r\nexport default async function createAccount(e) {\r\n    try {\r\n        e.preventDefault();\r\n        const pincode_1 = await this.setPrompt(\"Enter a keystore pincode\");\r\n        const pincode_2 = await this.setPrompt(\"Enter keystore pincode again\");\r\n        if (!pincode_1 || !pincode_2 || pincode_1 !== pincode_2)\r\n            throw \"Invalid pincode\";\r\n        this.error = null;\r\n        this.loading = Object.assign(Object.assign({}, this.loading), { fund: true });\r\n        const keypair = Keypair.random();\r\n        await axios(`https://friendbot.stellar.org?addr=${keypair.publicKey()}`).finally(() => (this.loading = Object.assign(Object.assign({}, this.loading), { fund: false })));\r\n        this.account = {\r\n            publicKey: keypair.publicKey(),\r\n            keystore: sjcl.encrypt(pincode_1, keypair.secret(), {\r\n                adata: JSON.stringify({\r\n                    publicKey: keypair.publicKey(),\r\n                }),\r\n            }),\r\n        };\r\n        await set(\"keyStore\", btoa(this.account.keystore));\r\n        this.updateAccount();\r\n    }\r\n    catch (err) {\r\n        this.error = handleError(err);\r\n    }\r\n}\r\n"}