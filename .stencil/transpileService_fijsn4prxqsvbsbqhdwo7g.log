{"moduleFile":{"sourceFilePath":"/home/chris/wallet/src/components/wallet/methods/trustAsset.ts","jsFilePath":"/home/chris/wallet/src/components/wallet/methods/trustAsset.js","cmps":[],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":["@services/error","@tinyanvil/sjcl","stellar-sdk"],"hasVdomAttribute":false,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomPropOrAttr":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":["@tinyanvil/sjcl","stellar-sdk","@services/error"],"potentialCmpRefs":[],"staticSourceFile":null,"staticSourceFileText":""},"jsText":"import sjcl from \"@tinyanvil/sjcl\";\r\nimport { Keypair, Account, TransactionBuilder, BASE_FEE, Networks, Operation, Asset, } from \"stellar-sdk\";\r\nimport { handleError } from \"@services/error\";\r\nexport default async function trustAsset(e, asset, issuer, pincode) {\r\n    try {\r\n        if (e)\r\n            e.preventDefault();\r\n        let instructions;\r\n        if (asset && issuer)\r\n            instructions = [asset, issuer];\r\n        else {\r\n            instructions = await this.setPrompt(\"{Asset} {Issuer}\");\r\n            instructions = instructions.split(\" \");\r\n        }\r\n        pincode = pincode || (await this.setPrompt(\"Enter your keystore pincode\"));\r\n        if (!instructions || !pincode)\r\n            return;\r\n        const keypair = Keypair.fromSecret(sjcl.decrypt(pincode, this.account.keystore));\r\n        this.error = null;\r\n        this.loading = Object.assign(Object.assign({}, this.loading), { trust: true });\r\n        await this.server\r\n            .accounts()\r\n            .accountId(keypair.publicKey())\r\n            .call()\r\n            .then(({ sequence }) => {\r\n            const account = new Account(keypair.publicKey(), sequence);\r\n            const transaction = new TransactionBuilder(account, {\r\n                fee: BASE_FEE,\r\n                networkPassphrase: Networks.TESTNET,\r\n            })\r\n                .addOperation(Operation.changeTrust({\r\n                asset: new Asset(instructions[0], instructions[1]),\r\n            }))\r\n                .setTimeout(0)\r\n                .build();\r\n            transaction.sign(keypair);\r\n            return this.server.submitTransaction(transaction);\r\n        })\r\n            .then((res) => console.log(res))\r\n            .finally(() => {\r\n            this.loading = Object.assign(Object.assign({}, this.loading), { trust: false });\r\n            this.updateAccount();\r\n        });\r\n    }\r\n    catch (err) {\r\n        this.error = handleError(err);\r\n    }\r\n}\r\n"}