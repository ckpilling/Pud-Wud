{"moduleFile":{"sourceFilePath":"/home/chris/wallet/src/components/wallet/methods/updateAccount.ts","jsFilePath":"/home/chris/wallet/src/components/wallet/methods/updateAccount.js","cmps":[],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":["@services/error","lodash-es"],"hasVdomAttribute":false,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomPropOrAttr":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":["lodash-es","@services/error"],"potentialCmpRefs":[],"staticSourceFile":null,"staticSourceFileText":""},"jsText":"import { omit as loOmit, map as loMap } from \"lodash-es\";\r\nimport { handleError } from \"@services/error\";\r\nexport default async function updateAccount(e) {\r\n    try {\r\n        if (e)\r\n            e.preventDefault();\r\n        this.error = null;\r\n        this.loading = Object.assign(Object.assign({}, this.loading), { update: true });\r\n        await this.server\r\n            .accounts()\r\n            .accountId(this.account.publicKey)\r\n            .call()\r\n            .then((account) => {\r\n            account.balances = loMap(account.balances, (balance) => loOmit(balance, [\r\n                \"limit\",\r\n                \"buying_liabilities\",\r\n                \"selling_liabilities\",\r\n                \"is_authorized\",\r\n                \"last_modified_ledger\",\r\n                balance.asset_type !== \"native\" ? \"asset_type\" : null,\r\n            ]));\r\n            this.account = Object.assign(Object.assign({}, this.account), { state: loOmit(account, [\r\n                    \"id\",\r\n                    \"_links\",\r\n                    \"sequence\",\r\n                    \"subentry_count\",\r\n                    \"last_modified_ledger\",\r\n                    \"flags\",\r\n                    \"thresholds\",\r\n                    \"account_id\",\r\n                    \"signers\",\r\n                    \"paging_token\",\r\n                    \"data_attr\",\r\n                ]) });\r\n        })\r\n            .finally(() => (this.loading = Object.assign(Object.assign({}, this.loading), { update: false })));\r\n    }\r\n    catch (err) {\r\n        this.error = handleError(err);\r\n    }\r\n}\r\n"}