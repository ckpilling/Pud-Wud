{"moduleFile":{"sourceFilePath":"/home/chris/wallet/src/components/wallet/methods/issueAsset.ts","jsFilePath":"/home/chris/wallet/src/components/wallet/methods/issueAsset.js","cmps":[],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":["stellar-sdk"],"hasVdomAttribute":false,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomPropOrAttr":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":["stellar-sdk"],"potentialCmpRefs":[],"staticSourceFile":null,"staticSourceFileText":""},"jsText":"import * as StellarSdk from \"stellar-sdk\";\r\nvar server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\r\n// Keys for accounts to issue and receive the new asset\r\nvar issuingKeys = StellarSdk.Keypair.fromSecret(\"SCZANGBA5YHTNYVVV4C3U252E2B6P6F5T3U6MM63WBSBZATAQI3EBTQ4\");\r\nvar receivingKeys = StellarSdk.Keypair.fromSecret(\"SDSAVCRE5JRAI7UFAVLE5IMIZRD6N6WOJUWKY4GFN34LOBEEUS4W2T2D\");\r\n// Create an object to represent the new asset\r\nvar chrisQuid = new StellarSdk.Asset(\"chrisQuid\", issuingKeys.publicKey());\r\nexport default async function createAccount(e) {\r\n    try {\r\n        e.preventDefault();\r\n        // First, the receiving account must trust the asset\r\n        server\r\n            .loadAccount(receivingKeys.publicKey())\r\n            .then(function (receiver) {\r\n            var transaction = new StellarSdk.TransactionBuilder(receiver, {\r\n                fee: 100,\r\n                networkPassphrase: StellarSdk.Networks.TESTNET,\r\n            })\r\n                // The `changeTrust` operation creates (or alters) a trustline\r\n                // The `limit` parameter below is optional\r\n                .addOperation(StellarSdk.Operation.changeTrust({\r\n                asset: chrisQuid,\r\n                limit: \"1000\",\r\n            }))\r\n                // setTimeout is required for a transaction\r\n                .setTimeout(100)\r\n                .build();\r\n            transaction.sign(receivingKeys);\r\n            return server.submitTransaction(transaction);\r\n        })\r\n            .then(console.log)\r\n            // Second, the issuing account actually sends a payment using the asset\r\n            .then(function () {\r\n            return server.loadAccount(issuingKeys.publicKey());\r\n        })\r\n            .then(function (issuer) {\r\n            var transaction = new StellarSdk.TransactionBuilder(issuer, {\r\n                fee: 100,\r\n                networkPassphrase: StellarSdk.Networks.TESTNET,\r\n            })\r\n                .addOperation(StellarSdk.Operation.payment({\r\n                destination: receivingKeys.publicKey(),\r\n                asset: chrisQuid,\r\n                amount: \"10\",\r\n            }))\r\n                // setTimeout is required for a transaction\r\n                .setTimeout(100)\r\n                .build();\r\n            transaction.sign(issuingKeys);\r\n            return server.submitTransaction(transaction);\r\n        });\r\n    }\r\n    finally {\r\n    }\r\n}\r\n"}