{"moduleFile":{"sourceFilePath":"/home/chris/wallet/src/components/prompt/prompt.tsx","jsFilePath":"/home/chris/wallet/src/components/prompt/prompt.js","cmps":[{"isLegacy":false,"tagName":"stellar-prompt","excludeFromCollection":false,"isCollectionDependency":false,"componentClassName":"Prompt","elementRef":"element","encapsulation":"shadow","shadowDelegatesFocus":false,"properties":[{"name":"prompter","type":"unknown","reflect":false,"mutable":true,"required":false,"optional":false,"complexType":{"original":"Prompter","resolved":"Prompter","references":{"Prompter":{"location":"local"}}},"docs":{"tags":[],"text":""},"internal":false}],"virtualProperties":[],"states":[{"name":"input"}],"methods":[],"listeners":[],"events":[],"watchers":[{"propName":"prompter","methodName":"watchHandler"}],"styles":[{"modeName":"$","styleId":"STELLAR-PROMPT","styleStr":null,"styleIdentifier":null,"compiledStyleText":null,"compiledStyleTextScoped":null,"compiledStyleTextScopedCommented":null,"externalStyles":[{"absolutePath":"/home/chris/wallet/src/components/prompt/prompt.scss","relativePath":"prompt.scss","originalComponentPath":"prompt.scss"}]}],"legacyConnect":[],"legacyContext":[],"internal":false,"assetsDirs":[],"styleDocs":[],"docs":{"tags":[],"text":""},"jsFilePath":"/home/chris/wallet/src/components/prompt/prompt.js","sourceFilePath":"/home/chris/wallet/src/components/prompt/prompt.tsx","hasAttributeChangedCallbackFn":false,"hasComponentWillLoadFn":false,"hasComponentDidLoadFn":true,"hasComponentShouldUpdateFn":false,"hasComponentWillUpdateFn":false,"hasComponentDidUpdateFn":false,"hasComponentWillRenderFn":false,"hasComponentDidRenderFn":false,"hasComponentDidUnloadFn":false,"hasConnectedCallbackFn":false,"hasDisconnectedCallbackFn":false,"hasElement":false,"hasEvent":false,"hasLifecycle":true,"hasListener":false,"hasListenerTarget":false,"hasListenerTargetWindow":false,"hasListenerTargetDocument":false,"hasListenerTargetBody":false,"hasListenerTargetParent":false,"hasMember":true,"hasMethod":false,"hasMode":false,"hasAttribute":false,"hasProp":true,"hasPropNumber":false,"hasPropBoolean":false,"hasPropString":false,"hasPropMutable":true,"hasReflect":false,"hasRenderFn":true,"hasState":true,"hasStyle":true,"hasVdomAttribute":true,"hasVdomXlink":false,"hasVdomClass":true,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":true,"hasVdomPropOrAttr":true,"hasVdomRef":false,"hasVdomRender":true,"hasVdomStyle":false,"hasVdomText":true,"hasWatchCallback":true,"isPlain":false,"htmlAttrNames":["class","onInput","value","selected","type","placeholder","onClick"],"htmlTagNames":["div","p","select","option","input","button"],"isUpdateable":true,"potentialCmpRefs":[]}],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":["@stencil/core","lodash-es"],"hasVdomAttribute":false,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomPropOrAttr":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":["@stencil/core","lodash-es"],"potentialCmpRefs":[],"staticSourceFile":null,"staticSourceFileText":""},"jsText":"import { h } from \"@stencil/core\";\r\nimport { defer as loDefer } from \"lodash-es\";\r\nexport class Prompt {\r\n    watchHandler(newValue, oldValue) {\r\n        if (newValue.show === oldValue.show)\r\n            return;\r\n        if (newValue.show) {\r\n            this.input = null;\r\n            if (newValue.options)\r\n                this.input =\r\n                    this.input ||\r\n                        `${newValue.options[0].code}:${newValue.options[0].issuer}`;\r\n            else\r\n                loDefer(() => this.element.shadowRoot.querySelector(\"input\").focus());\r\n        }\r\n        else {\r\n            this.prompter.message = null;\r\n            this.prompter.placeholder = null;\r\n            this.prompter.options = null;\r\n        }\r\n    }\r\n    componentDidLoad() {\r\n        addEventListener(\"keyup\", (e) => {\r\n            if (this.prompter.show)\r\n                e.keyCode === 13\r\n                    ? this.submit(e)\r\n                    : e.keyCode === 27\r\n                        ? this.cancel(e)\r\n                        : null;\r\n        });\r\n    }\r\n    cancel(e) {\r\n        e.preventDefault();\r\n        this.prompter = Object.assign(Object.assign({}, this.prompter), { show: false });\r\n        this.prompter.reject(null);\r\n    }\r\n    submit(e) {\r\n        e.preventDefault();\r\n        this.prompter = Object.assign(Object.assign({}, this.prompter), { show: false });\r\n        this.prompter.resolve(this.input);\r\n    }\r\n    update(e) {\r\n        this.input = e.target.value.toUpperCase();\r\n    }\r\n    render() {\r\n        return this.prompter.show ? (h(\"div\", { class: \"prompt-wrapper\" },\r\n            h(\"div\", { class: \"prompt\" },\r\n                this.prompter.message ? h(\"p\", null, this.prompter.message) : null,\r\n                this.prompter.options ? (h(\"div\", { class: \"select-wrapper\" },\r\n                    h(\"select\", { onInput: (e) => this.update(e) },\r\n                        \" \",\r\n                        this.prompter.options.map((option) => (h(\"option\", { value: `${option.code}:${option.issuer}`, selected: this.input === `${option.code}:${option.issuer}` }, option.code)))))) : (h(\"input\", { type: \"text\", placeholder: this.prompter.placeholder, value: this.input, onInput: (e) => this.update(e) })),\r\n                h(\"div\", { class: \"actions\" },\r\n                    h(\"button\", { class: \"cancel\", type: \"button\", onClick: (e) => this.cancel(e) }, \"Cancel\"),\r\n                    h(\"button\", { class: \"submit\", type: \"button\", onClick: (e) => this.submit(e) }, \"OK\"))))) : null;\r\n    }\r\n    static get is() { return \"stellar-prompt\"; }\r\n    static get encapsulation() { return \"shadow\"; }\r\n    static get originalStyleUrls() { return {\r\n        \"$\": [\"prompt.scss\"]\r\n    }; }\r\n    static get styleUrls() { return {\r\n        \"$\": [\"prompt.css\"]\r\n    }; }\r\n    static get properties() { return {\r\n        \"prompter\": {\r\n            \"type\": \"unknown\",\r\n            \"mutable\": true,\r\n            \"complexType\": {\r\n                \"original\": \"Prompter\",\r\n                \"resolved\": \"Prompter\",\r\n                \"references\": {\r\n                    \"Prompter\": {\r\n                        \"location\": \"local\"\r\n                    }\r\n                }\r\n            },\r\n            \"required\": false,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            }\r\n        }\r\n    }; }\r\n    static get states() { return {\r\n        \"input\": {}\r\n    }; }\r\n    static get elementRef() { return \"element\"; }\r\n    static get watchers() { return [{\r\n            \"propName\": \"prompter\",\r\n            \"methodName\": \"watchHandler\"\r\n        }]; }\r\n}\r\n"}