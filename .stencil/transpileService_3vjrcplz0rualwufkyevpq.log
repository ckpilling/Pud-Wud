{"moduleFile":{"sourceFilePath":"/home/chris/wallet/src/components/loader/loader.tsx","jsFilePath":"/home/chris/wallet/src/components/loader/loader.js","cmps":[{"isLegacy":false,"tagName":"stellar-loader","excludeFromCollection":false,"isCollectionDependency":false,"componentClassName":"Loader","elementRef":null,"encapsulation":"shadow","shadowDelegatesFocus":false,"properties":[{"name":"interval","type":"any","attribute":"interval","reflect":false,"mutable":false,"required":false,"optional":false,"complexType":{"original":"any","resolved":"any","references":{}},"docs":{"tags":[],"text":""},"internal":false}],"virtualProperties":[],"states":[{"name":"chances"},{"name":"chance"}],"methods":[],"listeners":[],"events":[],"watchers":[],"styles":[{"modeName":"$","styleId":"STELLAR-LOADER","styleStr":null,"styleIdentifier":null,"compiledStyleText":null,"compiledStyleTextScoped":null,"compiledStyleTextScopedCommented":null,"externalStyles":[{"absolutePath":"/home/chris/wallet/src/components/loader/loader.scss","relativePath":"loader.scss","originalComponentPath":"loader.scss"}]}],"legacyConnect":[],"legacyContext":[],"internal":false,"assetsDirs":[],"styleDocs":[],"docs":{"tags":[],"text":""},"jsFilePath":"/home/chris/wallet/src/components/loader/loader.js","sourceFilePath":"/home/chris/wallet/src/components/loader/loader.tsx","hasAttributeChangedCallbackFn":false,"hasComponentWillLoadFn":true,"hasComponentDidLoadFn":false,"hasComponentShouldUpdateFn":false,"hasComponentWillUpdateFn":false,"hasComponentDidUpdateFn":false,"hasComponentWillRenderFn":false,"hasComponentDidRenderFn":false,"hasComponentDidUnloadFn":false,"hasConnectedCallbackFn":false,"hasDisconnectedCallbackFn":false,"hasElement":false,"hasEvent":false,"hasLifecycle":true,"hasListener":false,"hasListenerTarget":false,"hasListenerTargetWindow":false,"hasListenerTargetDocument":false,"hasListenerTargetBody":false,"hasListenerTargetParent":false,"hasMember":true,"hasMethod":false,"hasMode":false,"hasAttribute":true,"hasProp":true,"hasPropNumber":false,"hasPropBoolean":false,"hasPropString":false,"hasPropMutable":false,"hasReflect":false,"hasRenderFn":true,"hasState":true,"hasStyle":true,"hasVdomAttribute":true,"hasVdomXlink":false,"hasVdomClass":true,"hasVdomFunctional":false,"hasVdomKey":true,"hasVdomListener":false,"hasVdomPropOrAttr":false,"hasVdomRef":false,"hasVdomRender":true,"hasVdomStyle":false,"hasVdomText":true,"hasWatchCallback":false,"isPlain":false,"htmlAttrNames":["class","key"],"htmlTagNames":["div"],"isUpdateable":true,"potentialCmpRefs":[]}],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":["@stencil/core","js-combinatorics","lodash-es"],"hasVdomAttribute":false,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomPropOrAttr":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":["js-combinatorics","@stencil/core","lodash-es"],"potentialCmpRefs":[],"staticSourceFile":null,"staticSourceFileText":""},"jsText":"import Combinatorics from \"js-combinatorics\";\r\nimport { h } from \"@stencil/core\";\r\nimport { isEqual as loIsEqual, sample as loSample } from \"lodash-es\";\r\nexport class Loader {\r\n    constructor() {\r\n        this.chances = [];\r\n        this.chance = null;\r\n    }\r\n    componentWillLoad() {\r\n        return new Promise((resolve) => {\r\n            if (!this.chances.length)\r\n                this.generateChances(9);\r\n            if (!this.interval)\r\n                this.interval = setInterval(() => this.getChance(), 100);\r\n            resolve();\r\n        });\r\n    }\r\n    generateChances(int) {\r\n        const baseN = Combinatorics.baseN([0, 1], int);\r\n        this.chances = baseN.toArray();\r\n        this.getChance();\r\n    }\r\n    getChance() {\r\n        const chance = loSample(this.chances);\r\n        if (loIsEqual(chance, this.chance))\r\n            this.getChance();\r\n        else\r\n            this.chance = chance;\r\n    }\r\n    render() {\r\n        return (h(\"div\", { class: \"loader\" }, this.chance.map((int, i) => (h(\"div\", { class: int ? \"on\" : null, key: `${int}${i}` })))));\r\n    }\r\n    static get is() { return \"stellar-loader\"; }\r\n    static get encapsulation() { return \"shadow\"; }\r\n    static get originalStyleUrls() { return {\r\n        \"$\": [\"loader.scss\"]\r\n    }; }\r\n    static get styleUrls() { return {\r\n        \"$\": [\"loader.css\"]\r\n    }; }\r\n    static get properties() { return {\r\n        \"interval\": {\r\n            \"type\": \"any\",\r\n            \"mutable\": false,\r\n            \"complexType\": {\r\n                \"original\": \"any\",\r\n                \"resolved\": \"any\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": false,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"attribute\": \"interval\",\r\n            \"reflect\": false\r\n        }\r\n    }; }\r\n    static get states() { return {\r\n        \"chances\": {},\r\n        \"chance\": {}\r\n    }; }\r\n}\r\n"}